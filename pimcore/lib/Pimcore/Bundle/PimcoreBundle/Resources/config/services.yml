services:
    pimcore.mvc_config_normalizer:
        class: Pimcore\Bundle\PimcoreBundle\Service\MvcConfigNormalizer
        arguments: ['@kernel']

    pimcore.bundle_locator:
        class: Pimcore\Bundle\PimcoreBundle\HttpKernel\BundleLocator\BundleLocator
        arguments: ['@kernel']

    pimcore.web_path_resolver:
        class: Pimcore\Bundle\PimcoreBundle\Service\WebPathResolver


    #
    # PIMCORE BUNDLES/EXTENSIONS
    #

    pimcore.extension.bundle_manager:
        class: Pimcore\API\Bundle\PimcoreBundleManager
        arguments: ['@service_container']

    #
    # ROUTING
    #

    pimcore.router.staticroute:
        class: Pimcore\Bundle\PimcoreBundle\Routing\Staticroute\Router
        arguments: ['@router.request_context', '@pimcore.mvc_config_normalizer']
        calls:
            - [setLogger, ['@logger']]
        tags:
            - { name: router, priority: 100 }

    pimcore.router.dynamic_route_provider:
        class: Pimcore\Bundle\PimcoreBundle\Routing\DocumentRouteProvider
        arguments: ['@pimcore.document.nearest_path_resolver', '@pimcore.mvc_config_normalizer']

    #
    # SESSION
    #

    pimcore.session.configurator:
        class: Pimcore\Bundle\PimcoreBundle\Session\SessionConfigurator
        # TODO implement adding configurators via tag/compiler pass if we want to expose this for thirdparty or for the website
        calls:
            - [addConfigurator, ['@pimcore_admin.session.configurator.admin_session_bags']]


    #
    # TRANSLATOR
    #

    pimcore.translator:
      class: Pimcore\Bundle\PimcoreBundle\Component\Translation\Translator
      decorates: translator
      arguments: ['@pimcore.translator.inner']
      calls:
        - [setKernel, ['@kernel']]
        - [setAdminPath, ['%pimcore.admin.translations.path%']]

    #
    # LOCALE
    #

    pimcore.locale:
      class: Pimcore\Bundle\PimcoreBundle\Service\Locale
      arguments: ['@request_stack']

    #
    # APPLICATION LOGGER
    #

    pimcore.app_logger:
      alias: pimcore.app_logger.default

    pimcore.app_logger.default:
      class: Pimcore\Log\ApplicationLogger
      calls:
        - [addWriter, ['@pimcore.app_logger.db_writer']]

    pimcore.app_logger.db_writer:
      class: Pimcore\Log\Handler\ApplicationLoggerDb

    #
    # RUNTIME CACHE
    #

    pimcore.cache.runtime:
      class: Pimcore\Cache\Runtime

    #
    # REQUEST SPECIFICS
    #

    pimcore.service.request_matcher_factory:
        class: Pimcore\Bundle\PimcoreBundle\Service\RequestMatcherFactory

    pimcore.service.context.pimcore_context_guesser:
        class: Pimcore\Bundle\PimcoreBundle\Service\Context\PimcoreContextGuesser
        arguments: ['@pimcore.service.request_matcher_factory']

    #
    # REQUEST RESOLVERS
    #
    # Read/write/normalize defined request attributes (e.g. document)
    #

    pimcore.service.request.pimcore_context_resolver:
        class: Pimcore\Bundle\PimcoreBundle\Service\Request\PimcoreContextResolver
        arguments: ['@request_stack', '@pimcore.service.context.pimcore_context_guesser']

    pimcore.service.request.editmode_resolver:
        class: Pimcore\Bundle\PimcoreBundle\Service\Request\EditmodeResolver
        arguments: ['@request_stack', '@pimcore_admin.security.user_loader', '@pimcore.http.request_helper']
        calls:
            - [setLogger, ['@logger']]
        tags:
            - { name: monolog.logger, channel: init }

    pimcore.service.request.document_resolver:
        class: Pimcore\Bundle\PimcoreBundle\Service\Request\DocumentResolver
        arguments: ['@request_stack']

    pimcore.service.request.template_resolver:
        class: Pimcore\Bundle\PimcoreBundle\Service\Request\TemplateResolver
        arguments: ['@request_stack', '@pimcore.mvc_config_normalizer']

    pimcore.service.request.template_vars_resolver:
        class: Pimcore\Bundle\PimcoreBundle\Service\Request\TemplateVarsResolver
        arguments: ['@pimcore.service.request.document_resolver', '@pimcore.service.request.editmode_resolver']

    pimcore.service.request.view_model_resolver:
        class: Pimcore\Bundle\PimcoreBundle\Service\Request\ViewModelResolver
        arguments: ['@request_stack', '@pimcore.service.request.template_vars_resolver']


    #
    # ARGUMENT RESOLVERS
    #

    pimcore.argument_resolver.document:
        class: Pimcore\Bundle\PimcoreBundle\ArgumentResolver\DocumentValueResolver
        arguments: ['@pimcore.service.request.document_resolver']
        tags:
            - { name: controller.argument_value_resolver }

    pimcore.argument_resolver.view_model:
        class: Pimcore\Bundle\PimcoreBundle\ArgumentResolver\ViewModelValueResolver
        arguments: ['@pimcore.service.request.view_model_resolver']
        tags:
            - { name: controller.argument_value_resolver }

    pimcore.argument_resolver.template_vars:
        class: Pimcore\Bundle\PimcoreBundle\ArgumentResolver\TemplateVarsValueResolver
        arguments: ['@pimcore.service.request.template_vars_resolver']
        tags:
            - { name: controller.argument_value_resolver }

    #
    # OBJECT SERVICES
    #
    # simple services exposing get() API for documents, objects and assets
    # this is only necessary if loading objects directly with only access to the container, e.g. templates

    pimcore.service.document:
        class: Pimcore\Bundle\PimcoreBundle\Service\Document\DocumentService

    pimcore.service.asset:
        class: Pimcore\Bundle\PimcoreBundle\Service\Asset\AssetService

    pimcore.service.object:
        class: Pimcore\Bundle\PimcoreBundle\Service\Object\ObjectService


    #
    # AREABRICKS
    #

    pimcore.area.brick_manager:
        class: Pimcore\Document\Area\AreabrickManager

    pimcore.area.brick.templating_base:
        abstract: true
        arguments: ['@pimcore.bundle_locator']


    #
    # DOCUMENT TAG HANDLING (EDITABLES)
    #

    pimcore.document.tag.handler:
        class: Pimcore\Document\Tag\DelegatingTagHandler
        calls:
            - [addHandler, ['@pimcore.document.tag.handler.default']]

    pimcore.document.tag.handler.default:
        class: Pimcore\Document\Tag\TagHandler
        arguments:
            - '@pimcore.area.brick_manager'
            - '@templating'
            - '@pimcore.bundle_locator'
            - '@pimcore.web_path_resolver'
            - '@pimcore.templating.action_renderer'


    #
    # PIMCORE SERVICES
    #

    pimcore.http.request_helper:
        class: Pimcore\Http\RequestHelper
        arguments: ['@request_stack']

    pimcore.http.response_helper:
        class: Pimcore\Http\ResponseHelper

    pimcore.document.nearest_path_resolver:
        class: Pimcore\Bundle\PimcoreBundle\Service\Document\NearestPathResolver
        arguments: ['@pimcore.document_service']

    # TODO inject user?
    pimcore.document_service:
        class: Pimcore\Model\Document\Service

    pimcore.plugin_broker:
        class: Pimcore\API\Plugin\Broker

    pimcore.http_client:
        class: \GuzzleHttp\Client
        factory: ['Pimcore\Bundle\PimcoreBundle\Http\ClientFactory', createHttpClient]

    pimcore.rest_client:
        class: Pimcore\Tool\RestClient
        arguments: ['@pimcore.http_client']
